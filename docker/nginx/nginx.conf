events {
}


http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    resolver 127.0.0.11 valid=30s; # Docker's internal DNS server

    server {
        listen 80;

        location /static/ {
            alias /app/uploaded/static/;
            expires 30d;
        }

        location /media/ {
            alias /app/uploaded/media/;
            expires 30d;
        }

        location / {
            proxy_pass http://django_server:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # location /services/celery/static/ {
        #     proxy_pass http://celery_server:5001/static/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     expires 30d;
        # }

        location /services/celery/ {

            # using set variable allows this to make route to upstream_celery optional,
            # and work even if it is not available at config time, but later on.
            set $upstream_celery http://celery_server:5001;
            rewrite ^/services/celery(.*) $1 break;
            proxy_pass $upstream_celery;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_redirect / /services/celery/;

            sub_filter_once off;
            sub_filter_types text/html application/javascript;
            sub_filter 'href="/' 'href="/services/celery/';
            sub_filter 'src="/' 'src="/services/celery/';
            sub_filter 'action="/' 'action="/services/celery/';
            sub_filter 'url: "/' 'url: "/services/celery/';

            # location ~* \.map$ {
            #     return 204;
            # }
            # proxy_buffering  off;
            # proxy_set_header Authorization "";
            # proxy_set_header X-Forwarded-User $remote_user;

            # proxy_intercept_errors on;
            # error_page 502 503 504 = /services/down?service_name=celery;
            #In case it is not up, we redirect to django's /service_down page with celery as service_name argument
        }

        # location /services/rabbitmq/static/ {
        #     proxy_pass http://rabbitmq:15672/static/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     expires 30d;
        # }

        location /services/rabbitmq/ {
            set $upstream_rabbitmq http://rabbitmq:15672;
            rewrite ^/services/rabbitmq(.*) $1 break;
            proxy_pass $upstream_rabbitmq;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_redirect / /services/rabbitmq/;

            sub_filter_once off;
            sub_filter_types text/html application/javascript;
            sub_filter 'href="/' 'href="/services/rabbitmq/';
            sub_filter 'src="/' 'src="/services/rabbitmq/';
            sub_filter 'action="/' 'action="/services/rabbitmq/';
            sub_filter 'url: "/' 'url: "/services/rabbitmq/';

            # proxy_buffering  off;
            # proxy_set_header Authorization "";
            # proxy_set_header X-Forwarded-User $remote_user;
            # proxy_pass_header Authorization;

            # proxy_intercept_errors on;
            # error_page 502 503 504 = /services/down?service_name=rabbitmq;
            #In case it is not up, we redirect to django's /service_down page with celery as service_name argument
        }

        # location /services/pgadmin/static/ {
        #     proxy_pass http://pgadmin:80/static/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     expires 30d;
        # }

        location /services/pgadmin/ {
            set $upstream_rabbitmq http://pgadmin:80;
            rewrite ^/services/pgadmin(.*) $1 break;
            proxy_pass $upstream_rabbitmq;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_redirect / /services/pgadmin/;

            sub_filter_once off;
            sub_filter_types text/html application/javascript;
            sub_filter 'href="/' 'href="/services/pgadmin/';
            sub_filter 'src="/' 'src="/services/pgadmin/';
            sub_filter 'action="/' 'action="/services/pgadmin/';
            sub_filter 'url: "/' 'url: "/services/pgadmin/';

            # proxy_buffering  off;
            # proxy_set_header Authorization "";
            # proxy_set_header X-Forwarded-User $remote_user;
            # proxy_pass_header Authorization;

            # proxy_intercept_errors on;
            # error_page 502 503 504 = /services/down?service_name=rabbitmq;
            #In case it is not up, we redirect to django's /service_down page with celery as service_name argument
        }
    }
}