# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG PYTHON_VERSION=3.12.3

FROM python:${PYTHON_VERSION}-slim AS base

ARG APP_USER=appuser
ARG UID=10001

RUN echo "Building the Docker image..."

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Create a non-root user to run the app
RUN adduser \
    --disabled-password \
    --gecos "" \
    --shell "/sbin/nologin" \
    --home "/${APP_USER}" \
    --uid "${UID}" \
    ${APP_USER}

# get pg_restore and other database tools
RUN apt-get update && \
    apt-get install -y \
    postgresql-client \
    dos2unix \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install PDM
RUN pip install pdm

####################################
## CREATE VOLUMES FOLDER IF EMPTY ##
# RUN mkdir -p /app/alyx/ && \
#     mkdir -p /app/uploaded/log && \
#     mkdir -p /app/uploaded/static && \
#     mkdir -p /app/uploaded/media && \
#     mkdir -p /app/uploaded/tables

RUN mkdir -p /app/alyx/ && \
    chown ${APP_USER}:${APP_USER} /app/alyx/

RUN mkdir -p /app/uploaded/log && \
    chown ${APP_USER}:${APP_USER} /app/uploaded/log/

RUN mkdir -p /app/uploaded/static && \
    chown ${APP_USER}:${APP_USER} /app/uploaded/static/

RUN mkdir -p /app/uploaded/media && \
    chown ${APP_USER}:${APP_USER} /app/uploaded/media/

RUN mkdir -p /app/uploaded/tables && \
    chown ${APP_USER}:${APP_USER} /app/uploaded/tables/

#####################################
# SET PERMISSIONS ON THE APP FOLDER #
RUN chown -R ${APP_USER}:${APP_USER} /app/

#################################################################
## Copy the django application source code into the container. ##
COPY ./alyx/ /app/alyx
COPY ./pyproject.toml /app/pyproject.toml
COPY ./pdm.lock /app/pdm.lock

#########################################################################
## ENSURE WE COPY ALL SHELL SCRIPTS INTO THE APP FOLDER FOLR LATER USE ##
COPY ./scripts/ /app/alyx/scripts

# we run chmod executeable, chown user, and we ensure scripts are LF ended with dos2unix
RUN find /app/alyx/scripts -type f -name "*.sh" \
    -exec dos2unix -o {} \; \ 
    -exec chmod +x {} \; \
    && \
    chown -R ${APP_USER}:${APP_USER} /app/alyx/scripts

#####################################################
## ENSURE WE COPY ALL DUMPS DATA IF THERE ARE SOME ##
COPY ./data/ /data

################################################
## ENSURE WE ACCESS THE ENTRYPOINT CORRECTLY  ##
COPY ./docker/django_entrypoint.bash /app/alyx/entrypoint.bash

RUN dos2unix -o /app/alyx/entrypoint.bash
RUN chown ${APP_USER}:${APP_USER} /app/alyx/entrypoint.bash
RUN chmod +x /app/alyx/entrypoint.bash

#############################################################
# Switch to the non-privileged user to run the application. #
USER ${APP_USER}

WORKDIR /app

# Install the application python dependancies packages
RUN pdm install --prod --frozen-lockfile --no-editable

# Expose the port that the application listens on.
EXPOSE 80

WORKDIR /app/alyx

RUN echo "Launching the entrypoint script..."
CMD ./entrypoint.bash
