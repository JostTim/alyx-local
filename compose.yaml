# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  django_server:
    restart: always
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    image: alyx_django_server:latest
    container_name: django_server
    hostname: 'django_server'
    volumes :
      - uploaded-data:/app/uploaded
      - ./config/db-secure-password:/run/secrets/db-secure-password:ro
      - ./src:/app/src:rw
    environment : 
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-secure-password
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy

  nginx_server:
    image: nginx:latest
    container_name: nginx_server
    hostname: 'nginx_server'
    ports:
      - "80:80"
    volumes:
      - uploaded-data:/app/uploaded
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - django_server

  db:
    image: postgres:17
    container_name: postgres_db
    hostname: 'postgres_db'
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./config/db-secure-password:/run/secrets/db-secure-password:ro
    environment:
      - POSTGRES_DB=alyx
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-secure-password
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    hostname: 'pgadmin'
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8888:80"
    depends_on:
      db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    hostname: 'rabbitmq'
    ports: 
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq-data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  celery_server:
    build:
        context: .
        dockerfile: ./docker/celery/Dockerfile
    image: celery_flower:latest
    container_name: celery_server
    hostname: 'celery_server'
    expose:
      - 5001
      - 5555
    ports:
      - "5001:5001"
      - "5555:5555"
    env_file:
      - ./config/celery.env
    depends_on:
      - rabbitmq


volumes:
  db-data:
  rabbitmq-data:
  uploaded-data: