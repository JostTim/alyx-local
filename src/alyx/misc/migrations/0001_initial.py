# Generated by Django 2.1.1 on 2018-10-15 09:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
from django.db.migrations.state import StateApps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
import django.db.models.deletion
import django.utils.timezone
from alyx.misc import models as misc_models
import uuid


def create_default_lab(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor):
    Lab = apps.get_model("misc", "Lab")
    Lab.objects.get_or_create(name=settings.DEFAULT_LAB_NAME)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0009_alter_user_last_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="LabMember",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. "
                        "Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("is_stock_manager", models.BooleanField(default=False)),
                ("is_public_user", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each "
                        "of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Lab",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "json",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, help_text="Structured data, formatted in a user-defined way", null=True
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("institution", models.CharField(blank=True, max_length=255)),
                ("address", models.CharField(blank=True, max_length=255)),
                (
                    "timezone",
                    models.CharField(
                        blank=True,
                        default="GB",
                        help_text="Timezone of the server "
                        "(see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LabLocation",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Long name", max_length=255)),
                (
                    "json",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, help_text="Structured data, formatted in a user-defined way", null=True
                    ),
                ),
                (
                    "lab",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="misc.Lab"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LabMembership",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, help_text="Long name", max_length=255)),
                (
                    "json",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, help_text="Structured data, formatted in a user-defined way", null=True
                    ),
                ),
                ("role", models.CharField(blank=True, max_length=255)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("lab", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="misc.Lab")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, help_text="Long name", max_length=255)),
                (
                    "json",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, help_text="Structured data, formatted in a user-defined way", null=True
                    ),
                ),
                ("date_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("text", models.TextField(blank=True)),
                ("image", models.ImageField(blank=True, null=True, upload_to=misc_models.get_image_path)),
                ("object_id", models.UUIDField()),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(create_default_lab, reverse_code=migrations.RunPython.noop),
    ]
