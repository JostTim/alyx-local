[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "alyx-local"
description = "Local database for experimental neuroscience laboratories"
authors = [{ name = "JostTim", email = "timothe.jost-mousseau@pasteur.fr" }]
license = { text = "MIT" }
requires-python = ">=3.12,<3.13"
dependencies = [
    "django>=5.1.3",
    "django-admin-list-filter-dropdown>=1.0.3",
    "django-admin-rangefilter>=0.13.2",
    "django-autocomplete-light>=3.11.0",
    "django-cleanup>=9.0.0",
    "django-filter>=24.3",
    "django-jsoneditor>=0.2.4",
    "django-markdownx>=4.0.7",
    "django-mptt>=0.16.0",
    "django-polymorphic>=3.1.0",
    "django-reversion>=5.1.0",
    "django-storages>=1.14.4",
    "django-structlog>=8.1.0",
    "django-test-without-migrations>=0.6",
    "djangorestframework>=3.15.2",
    "drf-spectacular[sidecar]>=0.27.2",
    "django-dbbackup>=4.2.1",
    "django-crispy-forms>=2.3",
    "docutils>=0.21.2",
    "gunicorn>=23.0.0",
    "colorlog>=6.9.0",
    "processing-pypelines[celery]>=0.0.66",
    "tzlocal>=5.2",
    "structlog>=24.4.0",
    "psycopg2-binary>=2.9.10",
    "matplotlib>=3.9.2",
    "alyx-connector>=2.1.10",
    "setuptools>=75.3.0",
    "rich>=13.9.4",
    "inotify>=0.2.10",
]
dynamic = ["version"]

[project.urls]
"source" = "https://github.com/JostTim/alyx-local"

[tool.wheel]
universal = true

[tool.flake8]
ignore = [
    "E203",
    "E117",
    "E265",
    "E266",
    "E401",
    "E704",
    "E712",
    "E731",
    "E741",
    "E722",
    "F401",
    "F403",
    "F841",
    "W504",
    "W503",
    "W605",
]
max-line-length = 99
exclude = ["migrations"]

[tool.black]
preview = true
line-length = 99

[tool.coverage.run]
branch = false
source = ["src/alyx"]
omit = []

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "pass",
    "return$",
]
show_missing = true

[tool.pdm]

[tool.pdm.version]
source = "file"
path = "src/alyx/__init__.py"

[tool.pdm.scripts]
configure = { call = "alyx.docker_install:configure", help = "Create necessary files for a first sucessfull build of the docker containers" }

configure-and-build = { composite = [
    "configure --delete-noinput",
    "fresh-build-fast",
], help = "Build from a fresh start, initiating a new configuration and a new build, removing previous configuration and builds. Best suitable for new installations or debugging." }

fresh-build = { composite = [
    "delete-containers",
    "delete-images",
    "delete-volumes",
    "build",
], help = "Build from a fresh start, by ensuring all containers, volumes and build are deleted prior to building. Make sure your database is backed up before doing this !" }
fresh-build-fast = { composite = [
    "delete-containers",
    "delete-volumes",
    "build",
], help = "Build from a fresh start, by ensuring all containers and volumes are deleted prior to building. This doesn't delete images, so it is not as 'clean' as fresh-build, but is faster. Make sure your database is backed up before doing this !" }
build = { shell = "docker compose up --build", help = "Build new images and then starts the containers for the alyx docker project" }

update-repo = { shell = "git fetch && git reset --hard && git pull", help = "Reset, fetch, and pull the latest changes from the repository. Be carefull, this will destroy all your changes that are no git-ignored. (All config files are git-ignored)" }

update-repo-configure-and-build = { composite = [
    "update-repo",
    "configure-and-build",
], help = "Reset, fetch, and pull the latest changes from the repository. Then build from a fresh start, initiating a new configuration and a new build, removing previous configuration and builds. Be carefull as it can delete without notice, any change you will have done to either builds, configuration or even files inside the repo." }

delete-containers = { shell = "docker-compose down", help = "Stop and delete containers. Make sure your database is backed up before doing this !" }
delete-images = { shell = "docker-compose down --rmi all", help = "Stop and delete built and downloaded container images. Make sure your database is backed up before doing this !" }
delete-volumes = { shell = "docker-compose down -v", help = "Stop and delete volumes. Make sure your database is backed up before doing this !" }
docker-cleanup = { shell = "docker system prune", help = "Remove all mess and unused images / volumes / etc that are left dangling around. Loss of data danger !" }


start = { shell = "docker compose restart", help = "Start containers (if stopped, or restart if they are currentely running) containers for alyx that have already been built" }
stop = { shell = "docker-compose stop", help = "Stop running containers without removing them" }

interact = { shell = "docker exec -it django_server bash", help = "Connect the the django container of the alyx project, through a SSH shell, to be able to run and perform terminal actions as on a regular linux operative system" }
manage = { shell = "docker exec -w /app/ -it django_server pdm run ./src/manage.py {args}", help = "Shortcut to run the manage.py script on the currentely running django alyx docker container. This is very powerfull for admin management like backups, restores, and many oher things like migrations etc." }
